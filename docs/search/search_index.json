{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RaTrace documentation","title":"Home"},{"location":"#ratrace-documentation","text":"","title":"RaTrace documentation"},{"location":"examples/","text":"Examples","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"features/","text":"Feature list Raytracing features Accurate raytracing for certain elements Approximate raytracing for segments-based descripted elements Fast raytrace mode for ordered elements or slow mode for full raytracing Dispersion of different wavelengths Tracking of ray phase information Simulation with UI or purely via console UI features Visual representation of simulated scene Color schemes: Wavelength dependent, rainbow, fixed Glass color depends on refractive index Scene creation via a Python script Loading/reloading of scene files Export of ray data and imager data to file Number of simulated rays configurable up to 10M rays Number of plotted rays configurable Auto-redraw ON/OFF after simulation Dark background mode Showing element properties ON/OFF Intensity-coded or equal-intensity-coded ray colors Axis ON/OFF Showing non-colliding rays ON/OFF Various display representation modes: scatterplot 1D/2D, image 2D, centroid, phase plot Zoom, pan and take screenshots of all graphs Line width of rays depends on number of plotted rays, for better visualisation Supported objects Light sources Plane source - Equidistant or random distribution Point source - Equiangular, Gaussian or random distribution Laser beam - Simplified, but correct beam width & intensity at point of impact Lenses Spherical lenses - Defined by radii R0 and R1 or by focal distance f Ideal thin lens - Ideal thick lens - With principal planes Aspherical lens - Custom shape - Generated from svg/dxf Glass elements Slab - Prism - Fresnell prism - Single microlens array - Double microlens array - Biprism - Sphere - Diffuse objects Diffuse plate - Described with BSDF (diffuse & specular parameters) Diffuse sphere - Mirrors Mirror - Half-transparent mirror - Parabolic mirror - Displays Passive display - Imager - With angular response Varia Black surface - Bandpass filter - With angular response (blueshift) Diffractive element -","title":"Feature list"},{"location":"features/#feature-list","text":"","title":"Feature list"},{"location":"features/#raytracing-features","text":"Accurate raytracing for certain elements Approximate raytracing for segments-based descripted elements Fast raytrace mode for ordered elements or slow mode for full raytracing Dispersion of different wavelengths Tracking of ray phase information Simulation with UI or purely via console","title":"Raytracing features"},{"location":"features/#ui-features","text":"Visual representation of simulated scene Color schemes: Wavelength dependent, rainbow, fixed Glass color depends on refractive index Scene creation via a Python script Loading/reloading of scene files Export of ray data and imager data to file Number of simulated rays configurable up to 10M rays Number of plotted rays configurable Auto-redraw ON/OFF after simulation Dark background mode Showing element properties ON/OFF Intensity-coded or equal-intensity-coded ray colors Axis ON/OFF Showing non-colliding rays ON/OFF Various display representation modes: scatterplot 1D/2D, image 2D, centroid, phase plot Zoom, pan and take screenshots of all graphs Line width of rays depends on number of plotted rays, for better visualisation","title":"UI features"},{"location":"features/#supported-objects","text":"","title":"Supported objects"},{"location":"features/#light-sources","text":"Plane source - Equidistant or random distribution Point source - Equiangular, Gaussian or random distribution Laser beam - Simplified, but correct beam width & intensity at point of impact","title":"Light sources"},{"location":"features/#lenses","text":"Spherical lenses - Defined by radii R0 and R1 or by focal distance f Ideal thin lens - Ideal thick lens - With principal planes Aspherical lens - Custom shape - Generated from svg/dxf","title":"Lenses"},{"location":"features/#glass-elements","text":"Slab - Prism - Fresnell prism - Single microlens array - Double microlens array - Biprism - Sphere -","title":"Glass elements"},{"location":"features/#diffuse-objects","text":"Diffuse plate - Described with BSDF (diffuse & specular parameters) Diffuse sphere -","title":"Diffuse objects"},{"location":"features/#mirrors","text":"Mirror - Half-transparent mirror - Parabolic mirror -","title":"Mirrors"},{"location":"features/#displays","text":"Passive display - Imager - With angular response","title":"Displays"},{"location":"features/#varia","text":"Black surface - Bandpass filter - With angular response (blueshift) Diffractive element -","title":"Varia"},{"location":"todo/","text":"To do's UI Remove all references from the scene files to numpy, convert to np.array in the class files itself Ipv checkbox een radiobutton voor full raytrace / ordered elements Display support (centroid, image, ...) for multiple sources Laser shape visualiseren Polaire plot in display opties Lens from svg or dxf file UI tabs in aparte files if main overal implementeren 4 Meer en betere properties van items plotten 5 str__ methods overal standaardiseren Docstrings & documentatie Beweegbaar display: Makkelijk te verplaatsen langsheen zijn normaal bv. Interseccties enkel met rays die nog geen eindpunt hebben Console output in 4th tab \"Console\" Fifth tab with \"about\" or so DONE: Laten werken zonder UI Splash screen (see: https://stackoverflow.com/questions/58661539/create-splash-screen-in-pyqt5) 3 Automatisatie: UI opstarten met een bepaalde scene, en runnen Allow for changing element properties: After loading the scene: mss wat te complex In main_console.py een parameter file schrijven en die dan inlezen in de load_scene of zo Inzoomen op een bepaald deel van de grafiek Een screenshot nemen van een bepaalde grafiek (canvas of canvasDisplay) Afsluiten Raytracing features 1 Scatteren op diffuse oppervlakken doen met importance sampling (cumsum etc) en equal intensities, ipv random en weighed intensities 2 Virtual rays enkel mogelijk wanneer de \"full raytrace\" aanstaat ipv de snelle met \"ordered items\" Imager response implementeren & plotten Andere definities van N toelaten voor dispersie pre-defined glass property list Reflecties aan glas elementen implementeren DONE: Back-tracing van bv. centroid, m.b.v. virtual sources Rays exporteren naar txt file, in een bepaald formaat Bewaar in de ray zelf de relatieve display coordinaat, en pixel nummer Imager resultaat exporteren (centroid, ...) Full, slower, non-sorted-slements raytracing Elements Diffuse sphere Filter 6 IdealThickLensClass Glass sphere Single ray source Aspherical lens Diffractive elements (aan de randen) Microlens Fresnell Biprism Powell lens DONE: Ideal thin lens class Spherical lens Diffuse plate Glass plate Flat mirror Parabolic mirror Mirror only one side reflective Semi-transparent mirror Varia Documentation Example files","title":"To do's"},{"location":"todo/#to-dos","text":"","title":"To do's"},{"location":"todo/#ui","text":"Remove all references from the scene files to numpy, convert to np.array in the class files itself Ipv checkbox een radiobutton voor full raytrace / ordered elements Display support (centroid, image, ...) for multiple sources Laser shape visualiseren Polaire plot in display opties Lens from svg or dxf file UI tabs in aparte files if main overal implementeren 4 Meer en betere properties van items plotten 5 str__ methods overal standaardiseren Docstrings & documentatie Beweegbaar display: Makkelijk te verplaatsen langsheen zijn normaal bv. Interseccties enkel met rays die nog geen eindpunt hebben Console output in 4th tab \"Console\" Fifth tab with \"about\" or so DONE: Laten werken zonder UI Splash screen (see: https://stackoverflow.com/questions/58661539/create-splash-screen-in-pyqt5) 3 Automatisatie: UI opstarten met een bepaalde scene, en runnen Allow for changing element properties: After loading the scene: mss wat te complex In main_console.py een parameter file schrijven en die dan inlezen in de load_scene of zo Inzoomen op een bepaald deel van de grafiek Een screenshot nemen van een bepaalde grafiek (canvas of canvasDisplay) Afsluiten","title":"UI"},{"location":"todo/#raytracing-features","text":"1 Scatteren op diffuse oppervlakken doen met importance sampling (cumsum etc) en equal intensities, ipv random en weighed intensities 2 Virtual rays enkel mogelijk wanneer de \"full raytrace\" aanstaat ipv de snelle met \"ordered items\" Imager response implementeren & plotten Andere definities van N toelaten voor dispersie pre-defined glass property list Reflecties aan glas elementen implementeren DONE: Back-tracing van bv. centroid, m.b.v. virtual sources Rays exporteren naar txt file, in een bepaald formaat Bewaar in de ray zelf de relatieve display coordinaat, en pixel nummer Imager resultaat exporteren (centroid, ...) Full, slower, non-sorted-slements raytracing","title":"Raytracing features"},{"location":"todo/#elements","text":"Diffuse sphere Filter 6 IdealThickLensClass Glass sphere Single ray source Aspherical lens Diffractive elements (aan de randen) Microlens Fresnell Biprism Powell lens DONE: Ideal thin lens class Spherical lens Diffuse plate Glass plate Flat mirror Parabolic mirror Mirror only one side reflective Semi-transparent mirror","title":"Elements"},{"location":"todo/#varia","text":"Documentation Example files","title":"Varia"},{"location":"usage/","text":"Usage Overview To use RaTrace, follow these instructions: Define the scene in a Python script by creating geometric objects and specifying their properties such as position, size, material, and lighting. Use the render function provided by RaTrace to render the scene. Optionally, adjust rendering parameters such as image resolution, anti-aliasing level, and maximum recursion depth. Run the Python script containing the scene definition and rendering commands. RaTrace will generate an image file (e.g., PNG) containing the rendered scene based on the specified parameters. Example Python script ( render_scene.py ): from RaTrace import Scene, Sphere, Plane, PointLight, render # Create a scene scene = Scene() # Add objects to the scene scene.add_object(Sphere(center=(0, 0, -5), radius=1, color=(255, 0, 0), reflection=0.5)) scene.add_object(Plane(normal=(0, 1, 0), distance=-1, color=(0, 255, 0))) # Add lights to the scene scene.add_light(PointLight(position=(5, 5, -10), intensity=0.8)) # Render the scene render(scene, width=800, height=600, anti_aliasing=True, max_depth=5, output_file=\"output.png\")","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#overview","text":"To use RaTrace, follow these instructions: Define the scene in a Python script by creating geometric objects and specifying their properties such as position, size, material, and lighting. Use the render function provided by RaTrace to render the scene. Optionally, adjust rendering parameters such as image resolution, anti-aliasing level, and maximum recursion depth. Run the Python script containing the scene definition and rendering commands. RaTrace will generate an image file (e.g., PNG) containing the rendered scene based on the specified parameters. Example Python script ( render_scene.py ): from RaTrace import Scene, Sphere, Plane, PointLight, render # Create a scene scene = Scene() # Add objects to the scene scene.add_object(Sphere(center=(0, 0, -5), radius=1, color=(255, 0, 0), reflection=0.5)) scene.add_object(Plane(normal=(0, 1, 0), distance=-1, color=(0, 255, 0))) # Add lights to the scene scene.add_light(PointLight(position=(5, 5, -10), intensity=0.8)) # Render the scene render(scene, width=800, height=600, anti_aliasing=True, max_depth=5, output_file=\"output.png\")","title":"Overview"}]}